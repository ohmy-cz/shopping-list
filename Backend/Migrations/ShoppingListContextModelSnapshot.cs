// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ShoppingListContext))]
    partial class ShoppingListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Item", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemCategoryID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ItemCategoryID");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ID = new Guid("a7617465-fc92-489d-a71c-ee89d5b94d48"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6760),
                            ItemCategoryID = new Guid("9e2b00e6-023a-464d-baf5-b68e6302365e"),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6761),
                            Name = "Potatoes"
                        },
                        new
                        {
                            ID = new Guid("d9308ae9-3f34-4265-add6-6d4b91bfe46e"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6772),
                            ItemCategoryID = new Guid("1d18d1d8-ebaf-4c1d-9698-aacb2cb06ae1"),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6773),
                            Name = "Eggs"
                        },
                        new
                        {
                            ID = new Guid("3b4c22b9-c1d1-4e14-b3fb-cf19954d3e25"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6769),
                            ItemCategoryID = new Guid("1d18d1d8-ebaf-4c1d-9698-aacb2cb06ae1"),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6769),
                            Name = "Eggs"
                        },
                        new
                        {
                            ID = new Guid("9a2eb9ed-e3f5-4270-a5fc-1097f20f869a"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6766),
                            ItemCategoryID = new Guid("a0c8cd9a-c2db-40ee-b648-3740a814ad3a"),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6766),
                            Name = "Beef"
                        });
                });

            modelBuilder.Entity("Backend.Models.ItemCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("9e2b00e6-023a-464d-baf5-b68e6302365e"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6749),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6749),
                            Name = "Vegetables"
                        },
                        new
                        {
                            ID = new Guid("a0c8cd9a-c2db-40ee-b648-3740a814ad3a"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6754),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6754),
                            Name = "Meat"
                        },
                        new
                        {
                            ID = new Guid("1d18d1d8-ebaf-4c1d-9698-aacb2cb06ae1"),
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6757),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6757),
                            Name = "Dairy products"
                        });
                });

            modelBuilder.Entity("Backend.Models.Shop", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DiscountChain")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ItemCategoryID")
                        .HasColumnType("uuid");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ItemCategoryID");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            ID = new Guid("d4fb61b7-42af-4e0b-b382-e9c8ee9a0021"),
                            DiscountChain = 0,
                            Latitude = 0f,
                            Longitude = 0f
                        },
                        new
                        {
                            ID = new Guid("3c173df0-317a-4287-a616-9b844d049dab"),
                            DiscountChain = 4,
                            Latitude = 0f,
                            Longitude = 0f
                        });
                });

            modelBuilder.Entity("Backend.Models.ShopItemCategories", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ItemCategoryID")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ShopID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ItemCategoryID");

                    b.HasIndex("ShopID");

                    b.ToTable("ShopOrderedItemCategories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("c1c5ed19-0d1e-4656-bc12-1e50884c47f3"),
                            ItemCategoryID = new Guid("9e2b00e6-023a-464d-baf5-b68e6302365e"),
                            Order = 1,
                            ShopID = new Guid("d4fb61b7-42af-4e0b-b382-e9c8ee9a0021")
                        },
                        new
                        {
                            ID = new Guid("2dde3a0d-4407-4d2c-92de-895a750fddc7"),
                            ItemCategoryID = new Guid("a0c8cd9a-c2db-40ee-b648-3740a814ad3a"),
                            Order = 0,
                            ShopID = new Guid("d4fb61b7-42af-4e0b-b382-e9c8ee9a0021")
                        },
                        new
                        {
                            ID = new Guid("bd5f5ad2-e934-4436-8511-0b9ee8c1081e"),
                            ItemCategoryID = new Guid("1d18d1d8-ebaf-4c1d-9698-aacb2cb06ae1"),
                            Order = 0,
                            ShopID = new Guid("3c173df0-317a-4287-a616-9b844d049dab")
                        });
                });

            modelBuilder.Entity("Backend.Models.ShoppingList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ItemID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RangeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RangeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ShopID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ShopID");

                    b.ToTable("ShoppingLists");

                    b.HasData(
                        new
                        {
                            ID = new Guid("d428ffe0-a2f1-4735-b852-63304b6468e2"),
                            Code = "ABC",
                            DateCreated = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6776),
                            LastChanged = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6777),
                            RangeEnd = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6776),
                            RangeStart = new DateTime(2023, 5, 23, 15, 8, 10, 696, DateTimeKind.Utc).AddTicks(6776),
                            ShopID = new Guid("d4fb61b7-42af-4e0b-b382-e9c8ee9a0021")
                        });
                });

            modelBuilder.Entity("Backend.Models.ShoppingListItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ItemID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShoppingListID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ShoppingListID");

                    b.ToTable("ShoppingListItem");

                    b.HasData(
                        new
                        {
                            ID = new Guid("04cd11b7-44fb-410a-9036-e7c339432ba2"),
                            ItemID = new Guid("a7617465-fc92-489d-a71c-ee89d5b94d48"),
                            ShoppingListID = new Guid("d428ffe0-a2f1-4735-b852-63304b6468e2")
                        },
                        new
                        {
                            ID = new Guid("4b2f3b99-f8ff-436a-9660-95d4e6afc967"),
                            ItemID = new Guid("d9308ae9-3f34-4265-add6-6d4b91bfe46e"),
                            ShoppingListID = new Guid("d428ffe0-a2f1-4735-b852-63304b6468e2")
                        },
                        new
                        {
                            ID = new Guid("c490e1f8-0705-4a62-83d3-7acbe349a141"),
                            ItemID = new Guid("3b4c22b9-c1d1-4e14-b3fb-cf19954d3e25"),
                            ShoppingListID = new Guid("d428ffe0-a2f1-4735-b852-63304b6468e2")
                        },
                        new
                        {
                            ID = new Guid("2abd590b-5988-4349-b6e3-b5e4af385951"),
                            ItemID = new Guid("9a2eb9ed-e3f5-4270-a5fc-1097f20f869a"),
                            ShoppingListID = new Guid("d428ffe0-a2f1-4735-b852-63304b6468e2")
                        });
                });

            modelBuilder.Entity("Backend.Models.Item", b =>
                {
                    b.HasOne("Backend.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Backend.Models.Shop", b =>
                {
                    b.HasOne("Backend.Models.ItemCategory", null)
                        .WithMany("Shops")
                        .HasForeignKey("ItemCategoryID");
                });

            modelBuilder.Entity("Backend.Models.ShopItemCategories", b =>
                {
                    b.HasOne("Backend.Models.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryID");

                    b.HasOne("Backend.Models.Shop", "Shop")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ShopID");

                    b.Navigation("ItemCategory");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Backend.Models.ShoppingList", b =>
                {
                    b.HasOne("Backend.Models.Item", null)
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ItemID");

                    b.HasOne("Backend.Models.Shop", "Shop")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ShopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Backend.Models.ShoppingListItem", b =>
                {
                    b.HasOne("Backend.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("Backend.Models.ShoppingList", "ShoppingList")
                        .WithMany()
                        .HasForeignKey("ShoppingListID");

                    b.Navigation("Item");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Backend.Models.Item", b =>
                {
                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("Backend.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("Backend.Models.Shop", b =>
                {
                    b.Navigation("ItemCategories");

                    b.Navigation("ShoppingLists");
                });
#pragma warning restore 612, 618
        }
    }
}
